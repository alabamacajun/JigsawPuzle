         var vsets = new List<Vector3>(5);
         vsets.Add(new Vector3(0.9, 1.1, 0.95));
         vsets.Add(new Vector3(1.1, 0.9, 1.05));
         vsets.Add(new Vector3(1.13, 0.95, 1.0));
         vsets.Add(new Vector3(0.9, 0.9, 1.15));
         vsets.Add(new Vector3(0.95, 1.19, 0.95));
         int[,,] mat = new int[GameSettings.NUM_ROWS, GameSettings.NUM_COLUMNS, 2];

         int pieceID = 0;
         Random rnd = new Random((int)(DateTime.Now.Ticks));

         for (int row = 0; row < GameSettings.NUM_ROWS; row++)
         {
            // Make the top and bottom curves face in the same way or opposite direction.
            bool topCurveFlipVertical = (row % 2 == 0);
            bool bottomCurveFlipVertical = (row % 2 != 0);

            for (int col = 0; col < GameSettings.NUM_COLUMNS; col++)
            {
               int rightSet = 0; // rnd.Next(5);
               int bottomSet = 0; // rnd.Next(5);
               mat[row, col, 0] = rightSet;
               mat[row, col, 1] = bottomSet;

               // Make the left and right curves face in the same way or opposite direction.
               bool leftCurveFlipHorizontal = (col % 2 != 0);
               bool rightCurveFlipHorizontal = (col % 2 == 0);

               // Toggle the facing of left and right curves with each row.
               if (row % 2 == 0)
               {
                  leftCurveFlipHorizontal = (col % 2 == 0);
                  rightCurveFlipHorizontal = (col % 2 != 0);
               }

               // Toggle the facing of top and bottom curves with each row.
               topCurveFlipVertical = !topCurveFlipVertical;
               bottomCurveFlipVertical = !bottomCurveFlipVertical;

               GraphicsPath figure = new GraphicsPath();

               int offsetX = (col * pieceWidth);
               int offsetY = (row * pieceHeight);
               int horizontalCurveLength = (col == lastCol ? lastColPieceWidth : pieceWidth);
               int verticalCurveLength = (row == lastRow ? lastRowPieceHeight : pieceHeight);
               #region Top

               if (row == 0)
               {
                  int startX = offsetX;
                  int startY = offsetY;
                  int endX = offsetX + horizontalCurveLength;
                  int endY = offsetY;

                  figure.AddLine(startX, startY, endX, endY);
               }
               else
               {
                  var v = vsets[1];//mat[row-1,col,1]];
                  //var crTop = new CurveRatio(2.0 - v.X, 2.0 - v.Y, 2.0 - v.Z);
                  var crTop = new CurveRatio(v.X, v.Y, v.Z);
                  BezierCurve topCurve = BezierCurve.CreateHorizontal(horizontalCurveLength, crTop);

                  if (topCurveFlipVertical)
                  {
                     topCurve.FlipVertical();
                  }
                  figure.AddBeziers(topCurve.Translate(offsetX, offsetY).Points);
               }

               #endregion

               #region Right

               if (col == lastCol)
               {
                  int startX = offsetX + lastColPieceWidth;
                  int startY = offsetY;
                  int endX = offsetX + lastColPieceWidth;
                  int endY = offsetY + verticalCurveLength;

                  figure.AddLine(startX, startY, endX, endY);
               }
               else
               {
                  BezierCurve verticalCurve = BezierCurve.CreateVertical(verticalCurveLength, new CurveRatio(vsets[rightSet]));

                  if (rightCurveFlipHorizontal)
                  {
                     verticalCurve.FlipHorizontal();
                  }

                  verticalCurve.Translate(offsetX + pieceWidth, offsetY);
                  figure.AddBeziers(verticalCurve.Points);
               }

               #endregion

               #region Bottom

               if (row == lastRow)
               {
                  int startX = offsetX;
                  int startY = offsetY + lastRowPieceHeight;
                  int endX = offsetX + horizontalCurveLength;
                  int endY = offsetY + lastRowPieceHeight;

                  figure.AddLine(endX, endY, startX, startY);
               }
               else
               {
                  BezierCurve bottomCurve = BezierCurve.CreateHorizontal(horizontalCurveLength, new CurveRatio(vsets[bottomSet]));
                  bottomCurve.FlipHorizontal();

                  if (bottomCurveFlipVertical)
                  {
                     bottomCurve.FlipVertical();
                  }

                  bottomCurve.Translate(offsetX + horizontalCurveLength, offsetY + pieceHeight);
                  figure.AddBeziers(bottomCurve.Points);
               }

               #endregion

               #region Left

               if (col == 0)
               {
                  int startX = offsetX;
                  int startY = offsetY;
                  int endX = offsetX;
                  int endY = offsetY + verticalCurveLength;

                  figure.AddLine(endX, endY, startX, startY);
               }
               else
               {
                  var v = vsets[1];//mat[row, col-1, 0]];
                  //var crLeft = new CurveRatio(2.0 - v.X, 2.0 - v.Y, 2.0 - v.Z);
                  var crLeft = new CurveRatio(v.X, v.Y, v.Z);
                  BezierCurve verticalCurve = BezierCurve.CreateVertical(verticalCurveLength, crLeft);
                  verticalCurve.FlipVertical();

                  if (leftCurveFlipHorizontal)
                  {
                     verticalCurve.FlipHorizontal();
                  }

                  verticalCurve.Translate(offsetX, offsetY + verticalCurveLength);
                  figure.AddBeziers(verticalCurve.Points);
               }

               #endregion

               #region Jigsaw information

               #region Determine adjacent piece IDs for the current piece

               List<Coordinate> adjacentCoords = new List<Coordinate>
                    {
                        new Coordinate(col, row - 1),
                        new Coordinate(col + 1, row),
                        new Coordinate(col, row + 1),
                        new Coordinate(col - 1, row)
                    };

               List<int> adjacentPieceIDs = DetermineAdjacentPieceIDs(adjacentCoords, GameSettings.NUM_COLUMNS);

               #endregion

               #region Construct piece picture

               Rectangle figureLocation = Rectangle.Truncate(figure.GetBounds());

               // Translate the figure to the origin to draw the picture for individual piece
               matrix.Reset();
               matrix.Translate(0 - figureLocation.X, 0 - figureLocation.Y);
               GraphicsPath translatedFigure = (GraphicsPath)figure.Clone();
               translatedFigure.Transform(matrix);

               Rectangle translatedFigureLocation = Rectangle.Truncate(translatedFigure.GetBounds());

               Bitmap piecePicture = new Bitmap(figureLocation.Width, figureLocation.Height);

               using (Graphics gfx = Graphics.FromImage(piecePicture))
               {
                  gfx.FillRectangle(Brushes.White, 0, 0, piecePicture.Width, piecePicture.Height);
                  gfx.ResetClip();
                  gfx.SetClip(translatedFigure);
                  gfx.DrawImage(sourcePicture, new Rectangle(0, 0, piecePicture.Width, piecePicture.Height),
                          figureLocation, GraphicsUnit.Pixel);

                  if (GameSettings.DRAW_PIECE_OUTLINE)
                  {
                     gfx.SmoothingMode = SmoothingMode.AntiAlias;
                     gfx.DrawPath(outlinePen, translatedFigure);
                  }
               }

               // Wanted to do the "bevel edge" effect but too complicated for me.                    
               Bitmap modifiedPiecePicture = (Bitmap)piecePicture.Clone();
               ImageUtilities.EdgeDetectHorizontal(modifiedPiecePicture);
               ImageUtilities.EdgeDetectVertical(modifiedPiecePicture);
               piecePicture = ImageUtilities.AlphaBlendMatrix(modifiedPiecePicture, piecePicture, 200);

               #endregion

               #region Piece and cluster information

               Piece piece = new Piece
               {
                  ID = pieceID,
                  ClusterID = pieceID,
                  Width = figureLocation.Width,
                  Height = figureLocation.Height,
                  BoardLocation = translatedFigureLocation,
                  SourcePictureLocation = figureLocation,
                  MovableFigure = (GraphicsPath)translatedFigure.Clone(),
                  StaticFigure = (GraphicsPath)figure.Clone(),
                  Picture = (Bitmap)piecePicture.Clone(),
                  AdjacentPieceIDs = adjacentPieceIDs
               };

               PieceCluster cluster = new PieceCluster
               {
                  ID = pieceID,
                  Width = figureLocation.Width,
                  Height = figureLocation.Height,
                  BoardLocation = translatedFigureLocation,
                  SourcePictureLocation = figureLocation,
                  MovableFigure = (GraphicsPath)translatedFigure.Clone(),
                  StaticFigure = (GraphicsPath)figure.Clone(),
                  Picture = (Bitmap)piecePicture.Clone(),
                  Pieces = new List<Piece> { piece }
               };

               #endregion

               clusters.Add(cluster);

               #endregion

               pieceID++;
            }
         }
